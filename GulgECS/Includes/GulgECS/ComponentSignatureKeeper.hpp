#ifndef COMPONENT_SIGNATURE_KEEPER_HPP
#define COMPONENT_SIGNATURE_KEEPER_HPP

#include <map>
#include <memory>

#include "GulgECS/Signature.hpp"
#include "GulgECS/ComponentTypes.hpp"
#include "GulgECS/GulgDeclarations.hpp"

namespace Gg {





/**
 * @brief      The ComponentSignatureKeeper class keep in memory the signature
 *             for each component
 */
class ComponentSignatureKeeper {

	public:




		/**
		 * @brief      Get the signature of a component
		 *
		 * @tparam     T                   The class of the component to get
		 *
		 * @return     The signature
		 */
		template<Component::ComponentConstraint T>
		static Signature getSignature() { return getSignature(T::getType()); }

		/**
		 * @brief      Get the signature of a component
		 *
		 * @param[in]  componentTypeToGet  The type of the component to get
		 *
		 * @return     The signature
		 */
		static Signature getSignature(const Component::Type &componentTypeToGet);


		/**
		 * @brief      Initializes the static class. This function is auto-generated by the ListOfComponents program.
		 */
		static void Init();

	private:

		ComponentSignatureKeeper();

		//Dont touch this, need for the auto-generated program
		static std::map<Component::Type, Signature> m_signatures;                     
};

}

#endif