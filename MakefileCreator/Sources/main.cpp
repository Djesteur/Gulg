#include <iostream>
#include <filesystem>
#include <string>
#include <vector>
#include <fstream>
#include <cstring>
#include <map>

std::map<std::string, std::string> getTextToCopy(std::ifstream &stream) {

	std::string currentPart{""};
	std::string currentLine;
	std::map<std::string, std::string> result;

	while(std::getline(stream, currentLine)) {

		if(currentLine.find("#---------------------------------------------#") != std::string::npos) {

			std::getline(stream, currentLine);
			currentLine.erase(0, 1);
			result.emplace(currentLine, currentPart);
			currentPart = "";
		}

		else { currentPart += currentLine + "\n"; }
	}

	return result;
}

void addTextForLibrary(std::ofstream &newMakefile, const std::string &libraryName, const std::string &allPart, const std::string &libPart) {

	newMakefile << "#This file was auto-generated by the MakefileCreator. Please, don't modify it" << std::endl << std::endl;
	newMakefile << allPart << std::endl;
	newMakefile << "LIBRARY_NAME = " << libraryName << std::endl;
	newMakefile << "LIBRARY_FOLDER = " << libraryName << std::endl;
	newMakefile << libPart << std::endl;
	
}

void addTextForExecutable(std::ofstream &newMakefile, const std::string &exeName, const std::string &allPart, const std::string &exePart) {

	newMakefile << "#This file was auto-generated by the MakefileCreator. Please, don't modify it" << std::endl << std::endl;
	newMakefile << allPart << std::endl;
	newMakefile << "EXE_NAME = " << exeName << std::endl;
	newMakefile << "EXE_FOLDER = " << exeName << std::endl;
	newMakefile << exePart << std::endl;
	

}

int main(int argc, char** argv) {

	//Check number of arguments

	if(argc != 3) { 

		std::cout << "ERROR: received " << argc - 1 << " instead of 2 arguments." << std::endl;  
		return -1;
	}

	//Check the folder (argument 1)

	std::filesystem::path newMakefileFolder{argv[1]};

	if(!std::filesystem::exists(newMakefileFolder)) { 

		std::cout << newMakefileFolder << " - doesn't exist, can't continue." << std::endl;
		return -1;
	}

	//Check the type of makeifle (argument 2)

	if(std::string{argv[2]} != "exe" && std::string{argv[2]} != "lib") {

		std::cout << "ERROR: The second argument must specifie if the makefile will be for a library or an executable. Must be choose with \"exe\" of \"lib\"" << std::endl;  
		return -1;
	}

	bool makefileForLibrary{true};

	if(std::string{argv[2]} == "exe") { makefileForLibrary = false; }

	//Get infos from the main makefile

	std::filesystem::path mainMakefilePath{"MakefileToCopy"};

	if(!std::filesystem::exists(mainMakefilePath)) {

		std::cout << "ERROR: Can't find the original makefile" << std::endl;
		return -1;
	}

	std::ifstream mainMakefile{mainMakefilePath};
	if(!mainMakefile) {

		std::cout << "ERROR: Can't open the original makefile" << std::endl;
		return -1;
	}

	std::map<std::string, std::string> textToCopy = getTextToCopy(mainMakefile);
	mainMakefile.close();

	//Check we found all infos
	if(textToCopy.find("All") == textToCopy.end()) { std::cout << "ERROR: Can't find ALL part." << std::endl; return -1; }
	if(textToCopy.find("lib") == textToCopy.end()) { std::cout << "ERROR: Can't find lib part." << std::endl; return -1; }
	if(textToCopy.find("exe") == textToCopy.end()) { std::cout << "ERROR: Can't find exe part." << std::endl; return -1; }


	std::filesystem::path pathToNewMakefile{newMakefileFolder};
	pathToNewMakefile += std::filesystem::path{"/Makefile"};

	std::ofstream newMakefile{pathToNewMakefile, std::ios::trunc};
	if(!newMakefile) {

		std::cout << "ERROR: Can't open the new makefile" << std::endl;
		return -1;
	}

	if(makefileForLibrary) { addTextForLibrary(newMakefile, std::string{argv[1]}, textToCopy["All"], textToCopy["lib"]); }
	else                   { addTextForExecutable(newMakefile, std::string{argv[1]}, textToCopy["All"], textToCopy["exe"]); }

	newMakefile.close();

	std::cout << "New makefile for the ";
	if(makefileForLibrary) { std::cout << "library ";}
	else { std::cout << "executable "; }
	std::cout << std::string{argv[1]} <<" created at path: " << pathToNewMakefile << std::endl;

	return 0;
}