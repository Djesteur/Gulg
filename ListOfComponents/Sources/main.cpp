#include <iostream>
#include <filesystem>
#include <string>
#include <vector>
#include <map>
#include <fstream>
#include <cstring>
#include <algorithm>

void removeKeyword(std::string &line, const std::string toDelete) {

	size_t beginPosition{line.find(toDelete)};

	if(beginPosition == std::string::npos) { return; }
	line.erase(beginPosition, toDelete.size());
}

bool isMacroDefinition(const std::string lineToTest) {

	if(lineToTest.find('#') != std::string::npos) { return true; }
	return false;
}

std::vector<std::string> searchInFile(const std::filesystem::path currentFilePath) {

	std::vector<std::string> searchResult;

	std::ifstream currentFile{currentFilePath};
	if(!currentFile) { 

		std::cout << "ERROR: can't open file " << currentFilePath << ": " << std::strerror(errno) << std::endl;
		return searchResult; 
	}

	std::string currentLine;

	std::vector<std::string> linesToTreat;

	while(std::getline(currentFile, currentLine, '\n')) {

		if(currentLine.find("STATIC_GET_TYPE") != std::string::npos) { linesToTreat.emplace_back(currentLine); }
	}

	currentFile.close();

	for(std::string currentLineToTreat: linesToTreat) {

		if(isMacroDefinition(currentLineToTreat)) { continue; }

		removeKeyword(currentLineToTreat, "STATIC_GET_TYPE");
		currentLineToTreat.erase(std::remove(currentLineToTreat.begin(), currentLineToTreat.end(), '('), currentLineToTreat.end());
		currentLineToTreat.erase(std::remove(currentLineToTreat.begin(), currentLineToTreat.end(), ')'), currentLineToTreat.end());
		currentLineToTreat.erase(std::remove(currentLineToTreat.begin(), currentLineToTreat.end(), ' '), currentLineToTreat.end());
		currentLineToTreat.erase(std::remove(currentLineToTreat.begin(), currentLineToTreat.end(), '\t'), currentLineToTreat.end());

		searchResult.emplace_back(currentLineToTreat);
	}

	return searchResult;
}



void createGeneratedComponentTypesFile(const std::filesystem::path &folderToWriteResult,const std::vector<std::string> &classToAddInEnum) {

	std::filesystem::path pathToFile{folderToWriteResult};
	pathToFile += std::filesystem::path{"ComponentTypes.hpp"};

	std::ofstream currentFile{pathToFile};
	if(!currentFile) { 

		std::cout << "ERROR: can't open file " << pathToFile << ": " << std::strerror(errno) << std::endl;
		return;
	}

	currentFile << "#ifndef COMPONENT_TYPES_HPP" << std::endl;
	currentFile << "#define COMPONENT_TYPES_HPP" << std::endl;
	currentFile << std::endl;
	currentFile << "//This file was auto_generated by the ListOfComponents program. Please, don't modify it." << std::endl;
	currentFile << std::endl;
	currentFile << "namespace Gg {" << std::endl;
	currentFile << std::endl;
	currentFile << "\tnamespace Component {" << std::endl;
	currentFile << std::endl;
	currentFile << "\t\tconst uint32_t MaxComponentType = " << classToAddInEnum.size() << ";" << std::endl;
	currentFile << std::endl;
	currentFile << "\t\tenum class Type {" << std::endl;
	currentFile << std::endl;

	for(size_t i{0}; i < classToAddInEnum.size(); i++) {

		currentFile << "\t\t\t" << classToAddInEnum[i];
		if(i != classToAddInEnum.size() - 1) { currentFile << ","; }
		currentFile << std::endl;
	}

	currentFile << "\t\t};" << std::endl;
	currentFile << "\t}" << std::endl;
	currentFile << "}" << std::endl;
	currentFile << std::endl;
	currentFile << "#endif" << std::endl;

	std::cout << "Types successfully writed in " << pathToFile << std::endl;

	currentFile.close();
}

void insertAutoGeneratedInitOfComponentSignatureKeeper(const std::filesystem::path &fileToInsert,const std::vector<std::string> &classToAddInEnum) {

	std::ifstream currentFileToCopy{fileToInsert};
	if(!currentFileToCopy) { 

		std::cout << "ERROR: can't open file " << fileToInsert << ": " << std::strerror(errno) << std::endl;
		return;
	}

	std::vector<std::string> beginToCopy, endToCopy;
	bool foundBeginInsert{false}, foundEndInsert{false};

	std::string currentLine;
	while(std::getline(currentFileToCopy, currentLine)) {

		if(!foundBeginInsert) { beginToCopy.emplace_back(currentLine); }
		if(currentLine == "//BEGIN - AUTOGENERATED") { foundBeginInsert = true; }
		if(currentLine == "//END - AUTOGENERATED") { foundEndInsert = true; }
		if(foundEndInsert) { endToCopy.emplace_back(currentLine); }
	}

	currentFileToCopy.close();


	if(!foundBeginInsert || !foundEndInsert) {

		std::cout << "ERROR: problem with insert zone in file " << fileToInsert << std::endl;
		if(!foundBeginInsert) { std::cout << "Cant find the begin of the insert zone." << std::endl; }
		if(!foundEndInsert) { std::cout << "Cant find the end of the insert zone." << std::endl; }
		return;
	}


	std::ofstream currentFileToRewrite{fileToInsert};
	if(!currentFileToRewrite) { 

		std::cout << "ERROR: can't open file " << fileToInsert << ": " << std::strerror(errno) << std::endl;
		return;
	}

	for(std::string currentString: beginToCopy) { currentFileToRewrite << currentString << std::endl; }

	currentFileToRewrite << "void ComponentSignatureKeeper::Init() {" << std::endl;
	currentFileToRewrite << std::endl;

	for(size_t i{0}; i < classToAddInEnum.size(); i++) {

		currentFileToRewrite << "\tm_signatures.insert(std::make_pair(Component::Type::" << classToAddInEnum[i];
		currentFileToRewrite << ", Signature{std::array<bool, " << classToAddInEnum.size() << "> { ";

		for(unsigned int j{0}; j < classToAddInEnum.size(); j++) {

			if(i == j) { currentFileToRewrite << "1"; }
			else { currentFileToRewrite << "0"; }

			if(j != classToAddInEnum.size() - 1) { currentFileToRewrite << ", "; }
		}

		currentFileToRewrite << " }}));" << std::endl;
	}

	currentFileToRewrite << "}" << std::endl;

	for(std::string currentString: endToCopy) { currentFileToRewrite << currentString << std::endl; }

	currentFileToRewrite.close();
}




int main(int argc, char** argv) {

	//The first argument is the name of the program
	if(argc != 4) { 

		std::cout << "ERROR: received " << argc - 1 << " instead of 3 arguments." << std::endl;  
		return -1;
	}

	std::filesystem::path folderWhereStartSearch{argv[1]};
	std::filesystem::path folderToWriteResult{argv[2]};
	std::filesystem::path fileToInsertComponents{argv[3]};

	if(!std::filesystem::exists(folderWhereStartSearch)) { 

		std::cout << folderWhereStartSearch << " - doesn't exist, can't continue." << std::endl;
		return -1;
	}

	if(!std::filesystem::exists(folderToWriteResult)) { 

		std::cout << folderToWriteResult << " - doesn't exist, can't continue." << std::endl;
		return -1;
	}

	if(!std::filesystem::exists(fileToInsertComponents)) { 

		std::cout << fileToInsertComponents << " - doesn't exist, can't continue." << std::endl;
		return -1;
	}


	std::vector<std::string> pathToIgnore{};
	std::vector<std::filesystem::directory_entry> filesToSearch;

	for(const std::filesystem::directory_entry &currentDir: std::filesystem::recursive_directory_iterator(folderWhereStartSearch)) {

		if(currentDir.path().extension() == ".hpp") { filesToSearch.emplace_back(currentDir); }
	}

	std::vector<std::string> classToAddInEnum;

	for(const std::filesystem::directory_entry &currentDir: filesToSearch) {

		std::vector<std::string> justFind = searchInFile(currentDir.path());
		classToAddInEnum.insert(classToAddInEnum.end(), justFind.begin(), justFind.end());
	}

	std::sort(classToAddInEnum.begin(), classToAddInEnum.end(), [](const std::string a, const std::string b) { return a < b; } );
	classToAddInEnum.erase(std::unique(classToAddInEnum.begin(), classToAddInEnum.end()), classToAddInEnum.end());

	for(std::string foundComponent: classToAddInEnum) {

		std::cout << "Found component: " << foundComponent << std::endl;
	}

	createGeneratedComponentTypesFile(folderToWriteResult, classToAddInEnum);
	insertAutoGeneratedInitOfComponentSignatureKeeper(fileToInsertComponents, classToAddInEnum);
}